name: Deploy Backend

on:
  push:
    branches: [develop, main]
    paths:
      - "backend/**"
      - ".github/workflows/deploy-backend.yml"
  pull_request:
    paths:
      - "backend/**"

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:17-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install uv
          uv venv
          uv pip install -r backend/pyproject.toml

      # - name: Run tests
      #   env:
      #     DATABASE_URL: postgresql://postgres:postgres@localhost:5432/postgres_test
      #   run: |
      #     cd backend
      #     pytest -v --cov=app --cov-report=xml

      # - name: Upload coverage reports
      #   uses: codecov/codecov-action@v3
      #   with:
      #     file: ./backend/coverage.xml

  deploy:
    needs: test
    if: |
      github.event_name == 'push' && 
      (github.ref == 'refs/heads/main' || 
       github.ref == 'refs/heads/develop')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set environment variables
        run: |
          if [[ $GITHUB_REF == 'refs/heads/main' ]]; then
            echo "ENVIRONMENT=prod" >> $GITHUB_ENV
          else
            echo "ENVIRONMENT=dev" >> $GITHUB_ENV
          fi

          echo "PROJECT_NAME=todo-app-1" >> $GITHUB_ENV

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build \
            --build-arg ENVIRONMENT=${ENVIRONMENT} \
            --cache-from $ECR_REGISTRY/${PROJECT_NAME}-${ENVIRONMENT}-backend:latest \
            -t $ECR_REGISTRY/${PROJECT_NAME}-${ENVIRONMENT}-backend:${IMAGE_TAG} \
            -t $ECR_REGISTRY/${PROJECT_NAME}-${ENVIRONMENT}-backend:latest \
            -f backend/Dockerfile backend/
          docker push $ECR_REGISTRY/${PROJECT_NAME}-${ENVIRONMENT}-backend:${IMAGE_TAG}
          docker push $ECR_REGISTRY/${PROJECT_NAME}-${ENVIRONMENT}-backend:latest

      - name: Update ECS service
        run: |
          aws ecs update-service \
            --cluster ${PROJECT_NAME}-${ENVIRONMENT}-cluster \
            --service ${PROJECT_NAME}-${ENVIRONMENT}-backend \
            --force-new-deployment

      - name: Notify Slack on success or failure
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,author,action,workflow
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
